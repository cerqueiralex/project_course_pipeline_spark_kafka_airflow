# Define os serviços que serão executados
services:

  # Serviço Kafka Broker
  broker:
    image: bitnami/kafka:3.9.0  # Imagem Docker do Kafka
    hostname: broker            # Nome do host dentro da rede Docker
    container_name: broker      # Nome do container
    ports:                      # Portas expostas
      - "9092:9092"             # Porta externa/interna para clientes
      - "9093:9093"             # Porta para o controller
      - "9101:9101"             # Porta para JMX
    environment:                # Variáveis de ambiente para configuração do Kafka
      KAFKA_PROCESS_ROLES: "broker,controller"  # Define funções do nó
      KAFKA_NODE_ID: "1"                         # ID do nó
      KAFKA_BROKER_ID: 1                         # ID do broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@broker:9093"  # Quorum do controller
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092  # Endereços que o broker anuncia
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,CONTROLLER://broker:9093  # Endereços que o broker escuta
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT"  # Mapeamento de protocolos
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"     # Listener usado para comunicação interna
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER" # Listener do controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1         # Fator de replicação para tópicos de offset
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter  # Reporter de métricas
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0         # Delay para rebalanceamento de grupos
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1  # Fator de replicação para tópicos da Confluent
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Fator de replicação para balancer
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1            # ISR mínimo para logs de transação
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # Fator de replicação dos logs de transação
      KAFKA_JMX_PORT: 9101                              # Porta JMX
      KAFKA_JMX_HOSTNAME: localhost                     # Host JMX
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081  # URL do Schema Registry
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092        # Bootstrap servers para métricas
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1                      # Fator de replicação de tópicos de métricas
      CONFLUENT_METRICS_ENABLE: 'false'                                 # Desabilita métricas Confluent
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'                        # ID de cliente
    healthcheck:                 # Verificação de saúde do Docker para checar se as portas e os containers estão funcionando
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 20s
      timeout: 15s
      retries: 5
    networks:                    # Rede do container que deve ser a mesma para todos os conteineres.
      - dsacademy

  # Serviço Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0  # Imagem do schema registry
    hostname: schema-registry                     # Nome do host
    container_name: schema-registry               # Nome do container
    depends_on:                                   # Dependência do broker
      - broker
    ports:
      - "8081:8081"                               # Porta do Schema Registry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry  # Nome do host do schema registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'  # Endereço do Kafka
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081                 # Onde o serviço escuta
    networks:
      - dsacademy
    healthcheck:                                  # Verificação de saúde
      test: [ "CMD", "curl", "-f", "http://localhost:8081/" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Serviço Control Center da Confluent
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"                               # Porta do painel web
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - dsacademy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # Serviço Webserver do Airflow
  webserver:
    image: apache/airflow:2.10.4-python3.11
    command: webserver
    entrypoint: ["/bin/bash", "-c", "chmod +x /opt/airflow/script/entrypoint.sh && /opt/airflow/script/entrypoint.sh"]
    depends_on:
      - postgres
    environment:
      - LOAD_EX=n
      - EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=dsa_security_key
    logging:
      options:
        max-size: 10m
        max-file: "3"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./entrypoint/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
    ports:
      - "8080:8080"
    healthcheck:
      test: ['CMD-SHELL', "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - dsacademy

  # Serviço Scheduler do Airflow
  scheduler:
    image: apache/airflow:2.10.4-python3.11
    depends_on:
      webserver:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./entrypoint/entrypoint.sh:/opt/airflow/script/entrypoint.sh
      - ./requirements.txt:/opt/airflow/requirements.txt
    environment:
      - LOAD_EX=n
      - EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW_WEBSERVER_SECRET_KEY=dsa_security_key
    command: bash -c "pip install -r ./requirements.txt && airflow db upgrade && airflow scheduler"
    networks:
      - dsacademy

  # Banco de dados PostgreSQL usado pelo Airflow
  postgres:
    image: postgres:14.0
    environment:
      - POSTGRES_USER=airflow                  # Nome do usuário
      - POSTGRES_PASSWORD=airflow              # Senha do usuário
      - POSTGRES_DB=airflow                    # Nome do banco de dados
    logging:
      options:
        max-size: 10m
        max-file: "3"
    networks:
      - dsacademy

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.4
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"                             # Porta do UI do Spark Master
      - "7077:7077"                             # Porta de comunicação do cluster
    networks:
      - dsacademy

  # Spark Worker conectado ao Spark Master
  spark-worker-1:
    image: bitnami/spark:3.5.4
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077
    networks:
      - dsacademy

  # Banco de dados Cassandra
  cassandra_db:
    image: cassandra:5.0.2
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"                             # Porta padrão do Cassandra
    environment:
      - MAX_HEAP_SIZE=512M                      # Tamanho máximo do heap
      - HEAP_NEWSIZE=100M                       # Tamanho do novo heap
      - CASSANDRA_USERNAME=cassandra            # Nome de usuário
      - CASSANDRA_PASSWORD=cassandra            # Senha do usuário
    networks:
      - dsacademy

# Definição da rede personalizada usada pelos containers
networks:
  dsacademy:
